(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{353:function(v,_,t){"use strict";t.r(_);var s=t(4),r=Object(s.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"设计模式可以分为哪几类-一共有多少种主流的设计模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设计模式可以分为哪几类-一共有多少种主流的设计模式"}},[v._v("#")]),v._v(" 设计模式可以分为哪几类？一共有多少种主流的设计模式？")]),v._v(" "),_("h3",{attrs:{id:"创建型模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[v._v("#")]),v._v(" 创建型模式")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("工厂方法")]),v._v("：在父类中提供一个创建对象的接口以允许子类决定实例化对象的类型")]),v._v(" "),_("li",[_("strong",[v._v("抽象工厂")]),v._v("：让你能创建一系列相关的对象，而无需指定某具体类")]),v._v(" "),_("li",[_("strong",[v._v("生成器")]),v._v("：使你能够分步骤创建复杂对象。该模式允许你使用相同的创建代码生成不同类型和形式的对象")]),v._v(" "),_("li",[_("strong",[v._v("原型")]),v._v("：让你能够复制已有对象，而又无需要使代码依赖它们所属的类")]),v._v(" "),_("li",[_("strong",[v._v("单例")]),v._v("：让你能够保证一个累只有一个实例，并提供一个访问该实例的全局节点")])]),v._v(" "),_("h3",{attrs:{id:"结构型模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[v._v("#")]),v._v(" 结构型模式")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("适配器")]),v._v("：让接口不兼容的对象能够相互合作")]),v._v(" "),_("li",[_("strong",[v._v("桥接")]),v._v("：可将一个大类或一系列密接相关的类拆分为抽象和实现两个独立的层次结构，从而能在开发时分别使用")]),v._v(" "),_("li",[_("strong",[v._v("组合")]),v._v("：你可以使用它将对象组合成树状结构，并且能像使用独立对象一样使用它们")]),v._v(" "),_("li",[_("strong",[v._v("装饰")]),v._v("：允许你通过将对象放入包含行为的特殊分装对象中来为原对象绑定新的行为")]),v._v(" "),_("li",[_("strong",[v._v("外观")]),v._v("：能为程序库、框架或其他复杂类提供一个简单的接口")]),v._v(" "),_("li",[_("strong",[v._v("享元")]),v._v("：摈弃了在每个对象中保存所有数据的方式，通过共享多个对象所共有的相同形态，让你能在有限的内存容量中载入更多对象")]),v._v(" "),_("li",[_("strong",[v._v("代理")]),v._v("：让你能呕提供对象的太替代品或其他占位符。代理控制着对于原对象的访问，并允许在将请求提交给对象前后进行一些处理")])]),v._v(" "),_("h3",{attrs:{id:"行为模式"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#行为模式"}},[v._v("#")]),v._v(" 行为模式")]),v._v(" "),_("ol",[_("li",[_("strong",[v._v("责任链")]),v._v("：允许你将请求沿着处理者链进行发送。收到请求后，每个处理均可对请求进行处理，或将其传递给链上的下个处理者")]),v._v(" "),_("li",[_("strong",[v._v("命令")]),v._v("：它可将请求转换为一个包含与请求相关的所有信息的独立对象。该转换让你能根据不同的请求将方法参数化、延迟请求执行或将其放入队列中，且能实现可撤销操作")]),v._v(" "),_("li",[_("strong",[v._v("迭代器")]),v._v("：让你能在不暴露集合底层变现形式（列表、栈和树等）的情况下便利集合中所有的元素")]),v._v(" "),_("li",[_("strong",[v._v("中介者")]),v._v("：能让你减少对象之间混乱无序的依赖关系。该模式会限制对象之间的直接交互，迫使它们通过一个中介者对象进行合作。")]),v._v(" "),_("li",[_("strong",[v._v("备忘录")]),v._v("：允许在不暴露对象实现细节的情况保存和恢复对象之间的状态")]),v._v(" "),_("li",[_("strong",[v._v("观察者")]),v._v("：允许你定义一种订阅机制，可在对象事件发生时通过多个“观察”该对象的其他对象")]),v._v(" "),_("li",[_("strong",[v._v("状态")]),v._v("：让你能在一个对象的内部状态变化时改变其行为，使其看上去就像改变了自身所属的类一样")]),v._v(" "),_("li",[_("strong",[v._v("策略")]),v._v("：能让你定义一系列算法，并将每种算法分别放入独立的类中，以使算法的对象能够互相互替换")]),v._v(" "),_("li",[_("strong",[v._v("模版方法")]),v._v("：在超类中定一个一个算法的框架，允许子类在不修改结构的饿情况下重写算法的特定步骤")]),v._v(" "),_("li",[_("strong",[v._v("访问者")]),v._v("：将算法与其所作用的对象隔离开来")])])])}),[],!1,null,null,null);_.default=r.exports}}]);